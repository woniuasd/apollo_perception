// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/pbf_tracker_config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto;
namespace apollo {
namespace perception {
namespace fusion {
class PbfTrackerConfig;
struct PbfTrackerConfigDefaultTypeInternal;
extern PbfTrackerConfigDefaultTypeInternal _PbfTrackerConfig_default_instance_;
}  // namespace fusion
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::fusion::PbfTrackerConfig* Arena::CreateMaybeMessage<::apollo::perception::fusion::PbfTrackerConfig>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {
namespace fusion {

// ===================================================================

class PbfTrackerConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.fusion.PbfTrackerConfig) */ {
 public:
  inline PbfTrackerConfig() : PbfTrackerConfig(nullptr) {}
  virtual ~PbfTrackerConfig();
  explicit constexpr PbfTrackerConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PbfTrackerConfig(const PbfTrackerConfig& from);
  PbfTrackerConfig(PbfTrackerConfig&& from) noexcept
    : PbfTrackerConfig() {
    *this = ::std::move(from);
  }

  inline PbfTrackerConfig& operator=(const PbfTrackerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline PbfTrackerConfig& operator=(PbfTrackerConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PbfTrackerConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const PbfTrackerConfig* internal_default_instance() {
    return reinterpret_cast<const PbfTrackerConfig*>(
               &_PbfTrackerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PbfTrackerConfig& a, PbfTrackerConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(PbfTrackerConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PbfTrackerConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PbfTrackerConfig* New() const final {
    return CreateMaybeMessage<PbfTrackerConfig>(nullptr);
  }

  PbfTrackerConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PbfTrackerConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PbfTrackerConfig& from);
  void MergeFrom(const PbfTrackerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbfTrackerConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.fusion.PbfTrackerConfig";
  }
  protected:
  explicit PbfTrackerConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFusionMethodFieldNumber = 1,
    kMotionFusionMethodFieldNumber = 2,
    kShapeFusionMethodFieldNumber = 3,
    kExistenceFusionMethodFieldNumber = 4,
  };
  // optional string type_fusion_method = 1 [default = "DstTypeFusion"];
  bool has_type_fusion_method() const;
  private:
  bool _internal_has_type_fusion_method() const;
  public:
  void clear_type_fusion_method();
  const std::string& type_fusion_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_fusion_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_fusion_method();
  std::string* release_type_fusion_method();
  void set_allocated_type_fusion_method(std::string* type_fusion_method);
  private:
  const std::string& _internal_type_fusion_method() const;
  void _internal_set_type_fusion_method(const std::string& value);
  std::string* _internal_mutable_type_fusion_method();
  public:

  // optional string motion_fusion_method = 2 [default = "KalmanMotionFusion"];
  bool has_motion_fusion_method() const;
  private:
  bool _internal_has_motion_fusion_method() const;
  public:
  void clear_motion_fusion_method();
  const std::string& motion_fusion_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_motion_fusion_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_motion_fusion_method();
  std::string* release_motion_fusion_method();
  void set_allocated_motion_fusion_method(std::string* motion_fusion_method);
  private:
  const std::string& _internal_motion_fusion_method() const;
  void _internal_set_motion_fusion_method(const std::string& value);
  std::string* _internal_mutable_motion_fusion_method();
  public:

  // optional string shape_fusion_method = 3 [default = "PbfShapeFusion"];
  bool has_shape_fusion_method() const;
  private:
  bool _internal_has_shape_fusion_method() const;
  public:
  void clear_shape_fusion_method();
  const std::string& shape_fusion_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shape_fusion_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shape_fusion_method();
  std::string* release_shape_fusion_method();
  void set_allocated_shape_fusion_method(std::string* shape_fusion_method);
  private:
  const std::string& _internal_shape_fusion_method() const;
  void _internal_set_shape_fusion_method(const std::string& value);
  std::string* _internal_mutable_shape_fusion_method();
  public:

  // optional string existence_fusion_method = 4 [default = "DstExistenceFusion"];
  bool has_existence_fusion_method() const;
  private:
  bool _internal_has_existence_fusion_method() const;
  public:
  void clear_existence_fusion_method();
  const std::string& existence_fusion_method() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_existence_fusion_method(ArgT0&& arg0, ArgT... args);
  std::string* mutable_existence_fusion_method();
  std::string* release_existence_fusion_method();
  void set_allocated_existence_fusion_method(std::string* existence_fusion_method);
  private:
  const std::string& _internal_existence_fusion_method() const;
  void _internal_set_existence_fusion_method(const std::string& value);
  std::string* _internal_mutable_existence_fusion_method();
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.fusion.PbfTrackerConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_type_fusion_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_fusion_method_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_motion_fusion_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr motion_fusion_method_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_shape_fusion_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shape_fusion_method_;
  static const ::PROTOBUF_NAMESPACE_ID::internal::LazyString _i_give_permission_to_break_this_code_default_existence_fusion_method_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr existence_fusion_method_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbfTrackerConfig

// optional string type_fusion_method = 1 [default = "DstTypeFusion"];
inline bool PbfTrackerConfig::_internal_has_type_fusion_method() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PbfTrackerConfig::has_type_fusion_method() const {
  return _internal_has_type_fusion_method();
}
inline void PbfTrackerConfig::clear_type_fusion_method() {
  type_fusion_method_.ClearToDefault(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_type_fusion_method_, GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PbfTrackerConfig::type_fusion_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfTrackerConfig.type_fusion_method)
  if (type_fusion_method_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_type_fusion_method_.get();
  return _internal_type_fusion_method();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PbfTrackerConfig::set_type_fusion_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 type_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfTrackerConfig.type_fusion_method)
}
inline std::string* PbfTrackerConfig::mutable_type_fusion_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.PbfTrackerConfig.type_fusion_method)
  return _internal_mutable_type_fusion_method();
}
inline const std::string& PbfTrackerConfig::_internal_type_fusion_method() const {
  return type_fusion_method_.Get();
}
inline void PbfTrackerConfig::_internal_set_type_fusion_method(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  type_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline std::string* PbfTrackerConfig::_internal_mutable_type_fusion_method() {
  _has_bits_[0] |= 0x00000001u;
  return type_fusion_method_.Mutable(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_type_fusion_method_, GetArena());
}
inline std::string* PbfTrackerConfig::release_type_fusion_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.PbfTrackerConfig.type_fusion_method)
  if (!_internal_has_type_fusion_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return type_fusion_method_.ReleaseNonDefault(nullptr, GetArena());
}
inline void PbfTrackerConfig::set_allocated_type_fusion_method(std::string* type_fusion_method) {
  if (type_fusion_method != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  type_fusion_method_.SetAllocated(nullptr, type_fusion_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.PbfTrackerConfig.type_fusion_method)
}

// optional string motion_fusion_method = 2 [default = "KalmanMotionFusion"];
inline bool PbfTrackerConfig::_internal_has_motion_fusion_method() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PbfTrackerConfig::has_motion_fusion_method() const {
  return _internal_has_motion_fusion_method();
}
inline void PbfTrackerConfig::clear_motion_fusion_method() {
  motion_fusion_method_.ClearToDefault(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_motion_fusion_method_, GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PbfTrackerConfig::motion_fusion_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfTrackerConfig.motion_fusion_method)
  if (motion_fusion_method_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_motion_fusion_method_.get();
  return _internal_motion_fusion_method();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PbfTrackerConfig::set_motion_fusion_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 motion_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfTrackerConfig.motion_fusion_method)
}
inline std::string* PbfTrackerConfig::mutable_motion_fusion_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.PbfTrackerConfig.motion_fusion_method)
  return _internal_mutable_motion_fusion_method();
}
inline const std::string& PbfTrackerConfig::_internal_motion_fusion_method() const {
  return motion_fusion_method_.Get();
}
inline void PbfTrackerConfig::_internal_set_motion_fusion_method(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  motion_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline std::string* PbfTrackerConfig::_internal_mutable_motion_fusion_method() {
  _has_bits_[0] |= 0x00000002u;
  return motion_fusion_method_.Mutable(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_motion_fusion_method_, GetArena());
}
inline std::string* PbfTrackerConfig::release_motion_fusion_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.PbfTrackerConfig.motion_fusion_method)
  if (!_internal_has_motion_fusion_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return motion_fusion_method_.ReleaseNonDefault(nullptr, GetArena());
}
inline void PbfTrackerConfig::set_allocated_motion_fusion_method(std::string* motion_fusion_method) {
  if (motion_fusion_method != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  motion_fusion_method_.SetAllocated(nullptr, motion_fusion_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.PbfTrackerConfig.motion_fusion_method)
}

// optional string shape_fusion_method = 3 [default = "PbfShapeFusion"];
inline bool PbfTrackerConfig::_internal_has_shape_fusion_method() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PbfTrackerConfig::has_shape_fusion_method() const {
  return _internal_has_shape_fusion_method();
}
inline void PbfTrackerConfig::clear_shape_fusion_method() {
  shape_fusion_method_.ClearToDefault(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_shape_fusion_method_, GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& PbfTrackerConfig::shape_fusion_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfTrackerConfig.shape_fusion_method)
  if (shape_fusion_method_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_shape_fusion_method_.get();
  return _internal_shape_fusion_method();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PbfTrackerConfig::set_shape_fusion_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000004u;
 shape_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfTrackerConfig.shape_fusion_method)
}
inline std::string* PbfTrackerConfig::mutable_shape_fusion_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.PbfTrackerConfig.shape_fusion_method)
  return _internal_mutable_shape_fusion_method();
}
inline const std::string& PbfTrackerConfig::_internal_shape_fusion_method() const {
  return shape_fusion_method_.Get();
}
inline void PbfTrackerConfig::_internal_set_shape_fusion_method(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  shape_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline std::string* PbfTrackerConfig::_internal_mutable_shape_fusion_method() {
  _has_bits_[0] |= 0x00000004u;
  return shape_fusion_method_.Mutable(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_shape_fusion_method_, GetArena());
}
inline std::string* PbfTrackerConfig::release_shape_fusion_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.PbfTrackerConfig.shape_fusion_method)
  if (!_internal_has_shape_fusion_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return shape_fusion_method_.ReleaseNonDefault(nullptr, GetArena());
}
inline void PbfTrackerConfig::set_allocated_shape_fusion_method(std::string* shape_fusion_method) {
  if (shape_fusion_method != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  shape_fusion_method_.SetAllocated(nullptr, shape_fusion_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.PbfTrackerConfig.shape_fusion_method)
}

// optional string existence_fusion_method = 4 [default = "DstExistenceFusion"];
inline bool PbfTrackerConfig::_internal_has_existence_fusion_method() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PbfTrackerConfig::has_existence_fusion_method() const {
  return _internal_has_existence_fusion_method();
}
inline void PbfTrackerConfig::clear_existence_fusion_method() {
  existence_fusion_method_.ClearToDefault(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_existence_fusion_method_, GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& PbfTrackerConfig::existence_fusion_method() const {
  // @@protoc_insertion_point(field_get:apollo.perception.fusion.PbfTrackerConfig.existence_fusion_method)
  if (existence_fusion_method_.IsDefault(nullptr)) return _i_give_permission_to_break_this_code_default_existence_fusion_method_.get();
  return _internal_existence_fusion_method();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PbfTrackerConfig::set_existence_fusion_method(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000008u;
 existence_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:apollo.perception.fusion.PbfTrackerConfig.existence_fusion_method)
}
inline std::string* PbfTrackerConfig::mutable_existence_fusion_method() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.fusion.PbfTrackerConfig.existence_fusion_method)
  return _internal_mutable_existence_fusion_method();
}
inline const std::string& PbfTrackerConfig::_internal_existence_fusion_method() const {
  return existence_fusion_method_.Get();
}
inline void PbfTrackerConfig::_internal_set_existence_fusion_method(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  existence_fusion_method_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::NonEmptyDefault{}, value, GetArena());
}
inline std::string* PbfTrackerConfig::_internal_mutable_existence_fusion_method() {
  _has_bits_[0] |= 0x00000008u;
  return existence_fusion_method_.Mutable(::apollo::perception::fusion::PbfTrackerConfig::_i_give_permission_to_break_this_code_default_existence_fusion_method_, GetArena());
}
inline std::string* PbfTrackerConfig::release_existence_fusion_method() {
  // @@protoc_insertion_point(field_release:apollo.perception.fusion.PbfTrackerConfig.existence_fusion_method)
  if (!_internal_has_existence_fusion_method()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return existence_fusion_method_.ReleaseNonDefault(nullptr, GetArena());
}
inline void PbfTrackerConfig::set_allocated_existence_fusion_method(std::string* existence_fusion_method) {
  if (existence_fusion_method != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  existence_fusion_method_.SetAllocated(nullptr, existence_fusion_method,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.fusion.PbfTrackerConfig.existence_fusion_method)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace fusion
}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fpbf_5ftracker_5fconfig_2eproto
