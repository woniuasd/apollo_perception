// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_lane.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5flane_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5flane_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "modules/common/proto/header.pb.h"
#include "modules/perception/proto/perception_camera.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_modules_2fperception_2fproto_2fperception_5flane_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_modules_2fperception_2fproto_2fperception_5flane_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5flane_2eproto;
namespace apollo {
namespace perception {
class PerceptionLanes;
struct PerceptionLanesDefaultTypeInternal;
extern PerceptionLanesDefaultTypeInternal _PerceptionLanes_default_instance_;
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> ::apollo::perception::PerceptionLanes* Arena::CreateMaybeMessage<::apollo::perception::PerceptionLanes>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace apollo {
namespace perception {

// ===================================================================

class PerceptionLanes PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:apollo.perception.PerceptionLanes) */ {
 public:
  inline PerceptionLanes() : PerceptionLanes(nullptr) {}
  virtual ~PerceptionLanes();
  explicit constexpr PerceptionLanes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PerceptionLanes(const PerceptionLanes& from);
  PerceptionLanes(PerceptionLanes&& from) noexcept
    : PerceptionLanes() {
    *this = ::std::move(from);
  }

  inline PerceptionLanes& operator=(const PerceptionLanes& from) {
    CopyFrom(from);
    return *this;
  }
  inline PerceptionLanes& operator=(PerceptionLanes&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PerceptionLanes& default_instance() {
    return *internal_default_instance();
  }
  static inline const PerceptionLanes* internal_default_instance() {
    return reinterpret_cast<const PerceptionLanes*>(
               &_PerceptionLanes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PerceptionLanes& a, PerceptionLanes& b) {
    a.Swap(&b);
  }
  inline void Swap(PerceptionLanes* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PerceptionLanes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PerceptionLanes* New() const final {
    return CreateMaybeMessage<PerceptionLanes>(nullptr);
  }

  PerceptionLanes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PerceptionLanes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PerceptionLanes& from);
  void MergeFrom(const PerceptionLanes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PerceptionLanes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "apollo.perception.PerceptionLanes";
  }
  protected:
  explicit PerceptionLanes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCameraLanelineFieldNumber = 5,
    kSourceTopicFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kCameraCalibratorFieldNumber = 4,
    kErrorCodeFieldNumber = 3,
  };
  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  int camera_laneline_size() const;
  private:
  int _internal_camera_laneline_size() const;
  public:
  void clear_camera_laneline();
  ::apollo::perception::camera::CameraLaneLine* mutable_camera_laneline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >*
      mutable_camera_laneline();
  private:
  const ::apollo::perception::camera::CameraLaneLine& _internal_camera_laneline(int index) const;
  ::apollo::perception::camera::CameraLaneLine* _internal_add_camera_laneline();
  public:
  const ::apollo::perception::camera::CameraLaneLine& camera_laneline(int index) const;
  ::apollo::perception::camera::CameraLaneLine* add_camera_laneline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >&
      camera_laneline() const;

  // optional string source_topic = 2;
  bool has_source_topic() const;
  private:
  bool _internal_has_source_topic() const;
  public:
  void clear_source_topic();
  const std::string& source_topic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_source_topic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_source_topic();
  std::string* release_source_topic();
  void set_allocated_source_topic(std::string* source_topic);
  private:
  const std::string& _internal_source_topic() const;
  void _internal_set_source_topic(const std::string& value);
  std::string* _internal_mutable_source_topic();
  public:

  // optional .apollo.common.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::apollo::common::Header& header() const;
  ::apollo::common::Header* release_header();
  ::apollo::common::Header* mutable_header();
  void set_allocated_header(::apollo::common::Header* header);
  private:
  const ::apollo::common::Header& _internal_header() const;
  ::apollo::common::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::apollo::common::Header* header);
  ::apollo::common::Header* unsafe_arena_release_header();

  // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
  bool has_camera_calibrator() const;
  private:
  bool _internal_has_camera_calibrator() const;
  public:
  void clear_camera_calibrator();
  const ::apollo::perception::camera::CameraCalibrator& camera_calibrator() const;
  ::apollo::perception::camera::CameraCalibrator* release_camera_calibrator();
  ::apollo::perception::camera::CameraCalibrator* mutable_camera_calibrator();
  void set_allocated_camera_calibrator(::apollo::perception::camera::CameraCalibrator* camera_calibrator);
  private:
  const ::apollo::perception::camera::CameraCalibrator& _internal_camera_calibrator() const;
  ::apollo::perception::camera::CameraCalibrator* _internal_mutable_camera_calibrator();
  public:
  void unsafe_arena_set_allocated_camera_calibrator(
      ::apollo::perception::camera::CameraCalibrator* camera_calibrator);
  ::apollo::perception::camera::CameraCalibrator* unsafe_arena_release_camera_calibrator();

  // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
  bool has_error_code() const;
  private:
  bool _internal_has_error_code() const;
  public:
  void clear_error_code();
  ::apollo::perception::camera::CameraErrorCode error_code() const;
  void set_error_code(::apollo::perception::camera::CameraErrorCode value);
  private:
  ::apollo::perception::camera::CameraErrorCode _internal_error_code() const;
  void _internal_set_error_code(::apollo::perception::camera::CameraErrorCode value);
  public:

  // @@protoc_insertion_point(class_scope:apollo.perception.PerceptionLanes)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine > camera_laneline_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_topic_;
  ::apollo::common::Header* header_;
  ::apollo::perception::camera::CameraCalibrator* camera_calibrator_;
  int error_code_;
  friend struct ::TableStruct_modules_2fperception_2fproto_2fperception_5flane_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PerceptionLanes

// optional .apollo.common.Header header = 1;
inline bool PerceptionLanes::_internal_has_header() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || header_ != nullptr);
  return value;
}
inline bool PerceptionLanes::has_header() const {
  return _internal_has_header();
}
inline const ::apollo::common::Header& PerceptionLanes::_internal_header() const {
  const ::apollo::common::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::common::Header&>(
      ::apollo::common::_Header_default_instance_);
}
inline const ::apollo::common::Header& PerceptionLanes::header() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionLanes.header)
  return _internal_header();
}
inline void PerceptionLanes::unsafe_arena_set_allocated_header(
    ::apollo::common::Header* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionLanes.header)
}
inline ::apollo::common::Header* PerceptionLanes::release_header() {
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::common::Header* PerceptionLanes::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionLanes.header)
  _has_bits_[0] &= ~0x00000002u;
  ::apollo::common::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::apollo::common::Header* PerceptionLanes::_internal_mutable_header() {
  _has_bits_[0] |= 0x00000002u;
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::common::Header>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::apollo::common::Header* PerceptionLanes::mutable_header() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionLanes.header)
  return _internal_mutable_header();
}
inline void PerceptionLanes::set_allocated_header(::apollo::common::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionLanes.header)
}

// optional string source_topic = 2;
inline bool PerceptionLanes::_internal_has_source_topic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PerceptionLanes::has_source_topic() const {
  return _internal_has_source_topic();
}
inline void PerceptionLanes::clear_source_topic() {
  source_topic_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PerceptionLanes::source_topic() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionLanes.source_topic)
  return _internal_source_topic();
}
template <typename ArgT0, typename... ArgT>
PROTOBUF_ALWAYS_INLINE
inline void PerceptionLanes::set_source_topic(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 source_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArena());
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionLanes.source_topic)
}
inline std::string* PerceptionLanes::mutable_source_topic() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionLanes.source_topic)
  return _internal_mutable_source_topic();
}
inline const std::string& PerceptionLanes::_internal_source_topic() const {
  return source_topic_.Get();
}
inline void PerceptionLanes::_internal_set_source_topic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  source_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline std::string* PerceptionLanes::_internal_mutable_source_topic() {
  _has_bits_[0] |= 0x00000001u;
  return source_topic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PerceptionLanes::release_source_topic() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionLanes.source_topic)
  if (!_internal_has_source_topic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return source_topic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PerceptionLanes::set_allocated_source_topic(std::string* source_topic) {
  if (source_topic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  source_topic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source_topic,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionLanes.source_topic)
}

// optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
inline bool PerceptionLanes::_internal_has_error_code() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PerceptionLanes::has_error_code() const {
  return _internal_has_error_code();
}
inline void PerceptionLanes::clear_error_code() {
  error_code_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::apollo::perception::camera::CameraErrorCode PerceptionLanes::_internal_error_code() const {
  return static_cast< ::apollo::perception::camera::CameraErrorCode >(error_code_);
}
inline ::apollo::perception::camera::CameraErrorCode PerceptionLanes::error_code() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionLanes.error_code)
  return _internal_error_code();
}
inline void PerceptionLanes::_internal_set_error_code(::apollo::perception::camera::CameraErrorCode value) {
  assert(::apollo::perception::camera::CameraErrorCode_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  error_code_ = value;
}
inline void PerceptionLanes::set_error_code(::apollo::perception::camera::CameraErrorCode value) {
  _internal_set_error_code(value);
  // @@protoc_insertion_point(field_set:apollo.perception.PerceptionLanes.error_code)
}

// optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
inline bool PerceptionLanes::_internal_has_camera_calibrator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || camera_calibrator_ != nullptr);
  return value;
}
inline bool PerceptionLanes::has_camera_calibrator() const {
  return _internal_has_camera_calibrator();
}
inline const ::apollo::perception::camera::CameraCalibrator& PerceptionLanes::_internal_camera_calibrator() const {
  const ::apollo::perception::camera::CameraCalibrator* p = camera_calibrator_;
  return p != nullptr ? *p : reinterpret_cast<const ::apollo::perception::camera::CameraCalibrator&>(
      ::apollo::perception::camera::_CameraCalibrator_default_instance_);
}
inline const ::apollo::perception::camera::CameraCalibrator& PerceptionLanes::camera_calibrator() const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionLanes.camera_calibrator)
  return _internal_camera_calibrator();
}
inline void PerceptionLanes::unsafe_arena_set_allocated_camera_calibrator(
    ::apollo::perception::camera::CameraCalibrator* camera_calibrator) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_calibrator_);
  }
  camera_calibrator_ = camera_calibrator;
  if (camera_calibrator) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:apollo.perception.PerceptionLanes.camera_calibrator)
}
inline ::apollo::perception::camera::CameraCalibrator* PerceptionLanes::release_camera_calibrator() {
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::CameraCalibrator* temp = camera_calibrator_;
  camera_calibrator_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::apollo::perception::camera::CameraCalibrator* PerceptionLanes::unsafe_arena_release_camera_calibrator() {
  // @@protoc_insertion_point(field_release:apollo.perception.PerceptionLanes.camera_calibrator)
  _has_bits_[0] &= ~0x00000004u;
  ::apollo::perception::camera::CameraCalibrator* temp = camera_calibrator_;
  camera_calibrator_ = nullptr;
  return temp;
}
inline ::apollo::perception::camera::CameraCalibrator* PerceptionLanes::_internal_mutable_camera_calibrator() {
  _has_bits_[0] |= 0x00000004u;
  if (camera_calibrator_ == nullptr) {
    auto* p = CreateMaybeMessage<::apollo::perception::camera::CameraCalibrator>(GetArena());
    camera_calibrator_ = p;
  }
  return camera_calibrator_;
}
inline ::apollo::perception::camera::CameraCalibrator* PerceptionLanes::mutable_camera_calibrator() {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionLanes.camera_calibrator)
  return _internal_mutable_camera_calibrator();
}
inline void PerceptionLanes::set_allocated_camera_calibrator(::apollo::perception::camera::CameraCalibrator* camera_calibrator) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_calibrator_);
  }
  if (camera_calibrator) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camera_calibrator)->GetArena();
    if (message_arena != submessage_arena) {
      camera_calibrator = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camera_calibrator, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  camera_calibrator_ = camera_calibrator;
  // @@protoc_insertion_point(field_set_allocated:apollo.perception.PerceptionLanes.camera_calibrator)
}

// repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
inline int PerceptionLanes::_internal_camera_laneline_size() const {
  return camera_laneline_.size();
}
inline int PerceptionLanes::camera_laneline_size() const {
  return _internal_camera_laneline_size();
}
inline ::apollo::perception::camera::CameraLaneLine* PerceptionLanes::mutable_camera_laneline(int index) {
  // @@protoc_insertion_point(field_mutable:apollo.perception.PerceptionLanes.camera_laneline)
  return camera_laneline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >*
PerceptionLanes::mutable_camera_laneline() {
  // @@protoc_insertion_point(field_mutable_list:apollo.perception.PerceptionLanes.camera_laneline)
  return &camera_laneline_;
}
inline const ::apollo::perception::camera::CameraLaneLine& PerceptionLanes::_internal_camera_laneline(int index) const {
  return camera_laneline_.Get(index);
}
inline const ::apollo::perception::camera::CameraLaneLine& PerceptionLanes::camera_laneline(int index) const {
  // @@protoc_insertion_point(field_get:apollo.perception.PerceptionLanes.camera_laneline)
  return _internal_camera_laneline(index);
}
inline ::apollo::perception::camera::CameraLaneLine* PerceptionLanes::_internal_add_camera_laneline() {
  return camera_laneline_.Add();
}
inline ::apollo::perception::camera::CameraLaneLine* PerceptionLanes::add_camera_laneline() {
  // @@protoc_insertion_point(field_add:apollo.perception.PerceptionLanes.camera_laneline)
  return _internal_add_camera_laneline();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::apollo::perception::camera::CameraLaneLine >&
PerceptionLanes::camera_laneline() const {
  // @@protoc_insertion_point(field_list:apollo.perception.PerceptionLanes.camera_laneline)
  return camera_laneline_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace apollo

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_modules_2fperception_2fproto_2fperception_5flane_2eproto
