// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/dst_type_fusion_config.proto

#include "modules/perception/proto/dst_type_fusion_config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace perception {
namespace fusion {
constexpr CameraDstTypeFusionParam::CameraDstTypeFusionParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , valid_dist_(0)
  , reliability_(0)
  , reliability_for_unknown_(0){}
struct CameraDstTypeFusionParamDefaultTypeInternal {
  constexpr CameraDstTypeFusionParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDstTypeFusionParamDefaultTypeInternal() {}
  union {
    CameraDstTypeFusionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDstTypeFusionParamDefaultTypeInternal _CameraDstTypeFusionParam_default_instance_;
constexpr LidarDstTypeFusionParam::LidarDstTypeFusionParam(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reliability_(0)
  , reliability_for_unknown_(0){}
struct LidarDstTypeFusionParamDefaultTypeInternal {
  constexpr LidarDstTypeFusionParamDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LidarDstTypeFusionParamDefaultTypeInternal() {}
  union {
    LidarDstTypeFusionParam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LidarDstTypeFusionParamDefaultTypeInternal _LidarDstTypeFusionParam_default_instance_;
constexpr DstTypeFusionConfig::DstTypeFusionConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camera_params_()
  , lidar_params_(){}
struct DstTypeFusionConfigDefaultTypeInternal {
  constexpr DstTypeFusionConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DstTypeFusionConfigDefaultTypeInternal() {}
  union {
    DstTypeFusionConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DstTypeFusionConfigDefaultTypeInternal _DstTypeFusionConfig_default_instance_;
}  // namespace fusion
}  // namespace perception
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, valid_dist_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, reliability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::CameraDstTypeFusionParam, reliability_for_unknown_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, name_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, reliability_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::LidarDstTypeFusionParam, reliability_for_unknown_),
  0,
  1,
  2,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::DstTypeFusionConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::DstTypeFusionConfig, camera_params_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::fusion::DstTypeFusionConfig, lidar_params_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, sizeof(::apollo::perception::fusion::CameraDstTypeFusionParam)},
  { 13, 21, sizeof(::apollo::perception::fusion::LidarDstTypeFusionParam)},
  { 24, -1, sizeof(::apollo::perception::fusion::DstTypeFusionConfig)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::fusion::_CameraDstTypeFusionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::fusion::_LidarDstTypeFusionParam_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::fusion::_DstTypeFusionConfig_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5modules/perception/proto/dst_type_fusi"
  "on_config.proto\022\030apollo.perception.fusio"
  "n\"}\n\030CameraDstTypeFusionParam\022\016\n\004name\030\001 "
  "\001(\t:\000\022\025\n\nvalid_dist\030\002 \001(\001:\0010\022\026\n\013reliabil"
  "ity\030\003 \001(\001:\0010\022\"\n\027reliability_for_unknown\030"
  "\004 \001(\001:\0010\"e\n\027LidarDstTypeFusionParam\022\016\n\004n"
  "ame\030\001 \001(\t:\000\022\026\n\013reliability\030\002 \001(\001:\0010\022\"\n\027r"
  "eliability_for_unknown\030\003 \001(\001:\0010\"\251\001\n\023DstT"
  "ypeFusionConfig\022I\n\rcamera_params\030\001 \003(\01322"
  ".apollo.perception.fusion.CameraDstTypeF"
  "usionParam\022G\n\014lidar_params\030\002 \003(\01321.apoll"
  "o.perception.fusion.LidarDstTypeFusionPa"
  "ram"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto = {
  false, false, 483, descriptor_table_protodef_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto, "modules/perception/proto/dst_type_fusion_config.proto", 
  &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto(&descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto);
namespace apollo {
namespace perception {
namespace fusion {

// ===================================================================

class CameraDstTypeFusionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraDstTypeFusionParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_valid_dist(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reliability(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_reliability_for_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

CameraDstTypeFusionParam::CameraDstTypeFusionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.fusion.CameraDstTypeFusionParam)
}
CameraDstTypeFusionParam::CameraDstTypeFusionParam(const CameraDstTypeFusionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&valid_dist_, &from.valid_dist_,
    static_cast<size_t>(reinterpret_cast<char*>(&reliability_for_unknown_) -
    reinterpret_cast<char*>(&valid_dist_)) + sizeof(reliability_for_unknown_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.CameraDstTypeFusionParam)
}

void CameraDstTypeFusionParam::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&valid_dist_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reliability_for_unknown_) -
    reinterpret_cast<char*>(&valid_dist_)) + sizeof(reliability_for_unknown_));
}

CameraDstTypeFusionParam::~CameraDstTypeFusionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.CameraDstTypeFusionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraDstTypeFusionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CameraDstTypeFusionParam::ArenaDtor(void* object) {
  CameraDstTypeFusionParam* _this = reinterpret_cast< CameraDstTypeFusionParam* >(object);
  (void)_this;
}
void CameraDstTypeFusionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraDstTypeFusionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraDstTypeFusionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&valid_dist_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reliability_for_unknown_) -
        reinterpret_cast<char*>(&valid_dist_)) + sizeof(reliability_for_unknown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDstTypeFusionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.fusion.CameraDstTypeFusionParam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double valid_dist = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_valid_dist(&has_bits);
          valid_dist_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reliability = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_reliability(&has_bits);
          reliability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reliability_for_unknown = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_reliability_for_unknown(&has_bits);
          reliability_for_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDstTypeFusionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.CameraDstTypeFusionParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double valid_dist = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_valid_dist(), target);
  }

  // optional double reliability = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reliability(), target);
  }

  // optional double reliability_for_unknown = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_reliability_for_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.CameraDstTypeFusionParam)
  return target;
}

size_t CameraDstTypeFusionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double valid_dist = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reliability = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

    // optional double reliability_for_unknown = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDstTypeFusionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDstTypeFusionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDstTypeFusionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.fusion.CameraDstTypeFusionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.fusion.CameraDstTypeFusionParam)
    MergeFrom(*source);
  }
}

void CameraDstTypeFusionParam::MergeFrom(const CameraDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      valid_dist_ = from.valid_dist_;
    }
    if (cached_has_bits & 0x00000004u) {
      reliability_ = from.reliability_;
    }
    if (cached_has_bits & 0x00000008u) {
      reliability_for_unknown_ = from.reliability_for_unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraDstTypeFusionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDstTypeFusionParam::CopyFrom(const CameraDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.CameraDstTypeFusionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDstTypeFusionParam::IsInitialized() const {
  return true;
}

void CameraDstTypeFusionParam::InternalSwap(CameraDstTypeFusionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDstTypeFusionParam, reliability_for_unknown_)
      + sizeof(CameraDstTypeFusionParam::reliability_for_unknown_)
      - PROTOBUF_FIELD_OFFSET(CameraDstTypeFusionParam, valid_dist_)>(
          reinterpret_cast<char*>(&valid_dist_),
          reinterpret_cast<char*>(&other->valid_dist_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDstTypeFusionParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[0]);
}

// ===================================================================

class LidarDstTypeFusionParam::_Internal {
 public:
  using HasBits = decltype(std::declval<LidarDstTypeFusionParam>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_reliability(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_reliability_for_unknown(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

LidarDstTypeFusionParam::LidarDstTypeFusionParam(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.fusion.LidarDstTypeFusionParam)
}
LidarDstTypeFusionParam::LidarDstTypeFusionParam(const LidarDstTypeFusionParam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArena());
  }
  ::memcpy(&reliability_, &from.reliability_,
    static_cast<size_t>(reinterpret_cast<char*>(&reliability_for_unknown_) -
    reinterpret_cast<char*>(&reliability_)) + sizeof(reliability_for_unknown_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.LidarDstTypeFusionParam)
}

void LidarDstTypeFusionParam::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&reliability_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&reliability_for_unknown_) -
    reinterpret_cast<char*>(&reliability_)) + sizeof(reliability_for_unknown_));
}

LidarDstTypeFusionParam::~LidarDstTypeFusionParam() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.LidarDstTypeFusionParam)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LidarDstTypeFusionParam::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LidarDstTypeFusionParam::ArenaDtor(void* object) {
  LidarDstTypeFusionParam* _this = reinterpret_cast< LidarDstTypeFusionParam* >(object);
  (void)_this;
}
void LidarDstTypeFusionParam::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LidarDstTypeFusionParam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LidarDstTypeFusionParam::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&reliability_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&reliability_for_unknown_) -
        reinterpret_cast<char*>(&reliability_)) + sizeof(reliability_for_unknown_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LidarDstTypeFusionParam::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string name = 1 [default = ""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.fusion.LidarDstTypeFusionParam.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double reliability = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_reliability(&has_bits);
          reliability_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double reliability_for_unknown = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_reliability_for_unknown(&has_bits);
          reliability_for_unknown_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LidarDstTypeFusionParam::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.fusion.LidarDstTypeFusionParam.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional double reliability = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_reliability(), target);
  }

  // optional double reliability_for_unknown = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_reliability_for_unknown(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.LidarDstTypeFusionParam)
  return target;
}

size_t LidarDstTypeFusionParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string name = 1 [default = ""];
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_name());
    }

    // optional double reliability = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 8;
    }

    // optional double reliability_for_unknown = 3 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LidarDstTypeFusionParam::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  GOOGLE_DCHECK_NE(&from, this);
  const LidarDstTypeFusionParam* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LidarDstTypeFusionParam>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.fusion.LidarDstTypeFusionParam)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.fusion.LidarDstTypeFusionParam)
    MergeFrom(*source);
  }
}

void LidarDstTypeFusionParam::MergeFrom(const LidarDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      reliability_ = from.reliability_;
    }
    if (cached_has_bits & 0x00000004u) {
      reliability_for_unknown_ = from.reliability_for_unknown_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LidarDstTypeFusionParam::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LidarDstTypeFusionParam::CopyFrom(const LidarDstTypeFusionParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.LidarDstTypeFusionParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LidarDstTypeFusionParam::IsInitialized() const {
  return true;
}

void LidarDstTypeFusionParam::InternalSwap(LidarDstTypeFusionParam* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LidarDstTypeFusionParam, reliability_for_unknown_)
      + sizeof(LidarDstTypeFusionParam::reliability_for_unknown_)
      - PROTOBUF_FIELD_OFFSET(LidarDstTypeFusionParam, reliability_)>(
          reinterpret_cast<char*>(&reliability_),
          reinterpret_cast<char*>(&other->reliability_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LidarDstTypeFusionParam::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[1]);
}

// ===================================================================

class DstTypeFusionConfig::_Internal {
 public:
};

DstTypeFusionConfig::DstTypeFusionConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_params_(arena),
  lidar_params_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.fusion.DstTypeFusionConfig)
}
DstTypeFusionConfig::DstTypeFusionConfig(const DstTypeFusionConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      camera_params_(from.camera_params_),
      lidar_params_(from.lidar_params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:apollo.perception.fusion.DstTypeFusionConfig)
}

void DstTypeFusionConfig::SharedCtor() {
}

DstTypeFusionConfig::~DstTypeFusionConfig() {
  // @@protoc_insertion_point(destructor:apollo.perception.fusion.DstTypeFusionConfig)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DstTypeFusionConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DstTypeFusionConfig::ArenaDtor(void* object) {
  DstTypeFusionConfig* _this = reinterpret_cast< DstTypeFusionConfig* >(object);
  (void)_this;
}
void DstTypeFusionConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DstTypeFusionConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DstTypeFusionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.fusion.DstTypeFusionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_params_.Clear();
  lidar_params_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DstTypeFusionConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .apollo.perception.fusion.CameraDstTypeFusionParam camera_params = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.fusion.LidarDstTypeFusionParam lidar_params = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_lidar_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DstTypeFusionConfig::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.fusion.DstTypeFusionConfig)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .apollo.perception.fusion.CameraDstTypeFusionParam camera_params = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_camera_params(i), target, stream);
  }

  // repeated .apollo.perception.fusion.LidarDstTypeFusionParam lidar_params = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_lidar_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_lidar_params(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.fusion.DstTypeFusionConfig)
  return target;
}

size_t DstTypeFusionConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.fusion.DstTypeFusionConfig)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.fusion.CameraDstTypeFusionParam camera_params = 1;
  total_size += 1UL * this->_internal_camera_params_size();
  for (const auto& msg : this->camera_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.fusion.LidarDstTypeFusionParam lidar_params = 2;
  total_size += 1UL * this->_internal_lidar_params_size();
  for (const auto& msg : this->lidar_params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DstTypeFusionConfig::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.fusion.DstTypeFusionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const DstTypeFusionConfig* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DstTypeFusionConfig>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.fusion.DstTypeFusionConfig)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.fusion.DstTypeFusionConfig)
    MergeFrom(*source);
  }
}

void DstTypeFusionConfig::MergeFrom(const DstTypeFusionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.fusion.DstTypeFusionConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_params_.MergeFrom(from.camera_params_);
  lidar_params_.MergeFrom(from.lidar_params_);
}

void DstTypeFusionConfig::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.fusion.DstTypeFusionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DstTypeFusionConfig::CopyFrom(const DstTypeFusionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.fusion.DstTypeFusionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DstTypeFusionConfig::IsInitialized() const {
  return true;
}

void DstTypeFusionConfig::InternalSwap(DstTypeFusionConfig* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  camera_params_.InternalSwap(&other->camera_params_);
  lidar_params_.InternalSwap(&other->lidar_params_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DstTypeFusionConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fdst_5ftype_5ffusion_5fconfig_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace fusion
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::fusion::CameraDstTypeFusionParam* Arena::CreateMaybeMessage< ::apollo::perception::fusion::CameraDstTypeFusionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::fusion::CameraDstTypeFusionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::fusion::LidarDstTypeFusionParam* Arena::CreateMaybeMessage< ::apollo::perception::fusion::LidarDstTypeFusionParam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::fusion::LidarDstTypeFusionParam >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::fusion::DstTypeFusionConfig* Arena::CreateMaybeMessage< ::apollo::perception::fusion::DstTypeFusionConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::fusion::DstTypeFusionConfig >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
