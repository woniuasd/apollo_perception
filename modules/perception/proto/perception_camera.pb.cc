// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/perception/proto/perception_camera.proto

#include "modules/perception/proto/perception_camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace apollo {
namespace perception {
namespace camera {
constexpr LaneLineCubicCurve::LaneLineCubicCurve(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : longitude_min_(0)
  , longitude_max_(0)
  , a_(0)
  , b_(0)
  , c_(0)
  , d_(0){}
struct LaneLineCubicCurveDefaultTypeInternal {
  constexpr LaneLineCubicCurveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LaneLineCubicCurveDefaultTypeInternal() {}
  union {
    LaneLineCubicCurve _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LaneLineCubicCurveDefaultTypeInternal _LaneLineCubicCurve_default_instance_;
constexpr EndPoints::EndPoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct EndPointsDefaultTypeInternal {
  constexpr EndPointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EndPointsDefaultTypeInternal() {}
  union {
    EndPoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EndPointsDefaultTypeInternal _EndPoints_default_instance_;
constexpr CameraLaneLine::CameraLaneLine(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : curve_camera_point_set_()
  , curve_image_point_set_()
  , image_end_point_set_()
  , curve_camera_coord_(nullptr)
  , curve_image_coord_(nullptr)
  , type_(0)

  , track_id_(0)
  , confidence_(0)
  , use_type_(0)

  , pos_type_(-5)
{}
struct CameraLaneLineDefaultTypeInternal {
  constexpr CameraLaneLineDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraLaneLineDefaultTypeInternal() {}
  union {
    CameraLaneLine _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraLaneLineDefaultTypeInternal _CameraLaneLine_default_instance_;
constexpr CameraCalibrator::CameraCalibrator(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pitch_angle_(0)
  , camera_height_(0){}
struct CameraCalibratorDefaultTypeInternal {
  constexpr CameraCalibratorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraCalibratorDefaultTypeInternal() {}
  union {
    CameraCalibrator _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraCalibratorDefaultTypeInternal _CameraCalibrator_default_instance_;
constexpr CameraObstacle::CameraObstacle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_probs_()
  , key_points_()
  , debug_message_()
  , obstacle_(nullptr)
  , upper_left_(nullptr)
  , lower_right_(nullptr)
  , type_(0)
{}
struct CameraObstacleDefaultTypeInternal {
  constexpr CameraObstacleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraObstacleDefaultTypeInternal() {}
  union {
    CameraObstacle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraObstacleDefaultTypeInternal _CameraObstacle_default_instance_;
constexpr CameraDebug::CameraDebug(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : camera_laneline_()
  , camera_obstacle_()
  , source_topic_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , camera_calibrator_(nullptr)
  , error_code_(0)
{}
struct CameraDebugDefaultTypeInternal {
  constexpr CameraDebugDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CameraDebugDefaultTypeInternal() {}
  union {
    CameraDebug _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CameraDebugDefaultTypeInternal _CameraDebug_default_instance_;
}  // namespace camera
}  // namespace perception
}  // namespace apollo
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, longitude_min_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, longitude_max_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, a_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, b_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, c_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::LaneLineCubicCurve, d_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, start_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::EndPoints, end_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, pos_type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_camera_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_image_coord_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_camera_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, curve_image_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, image_end_point_set_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, track_id_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, confidence_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraLaneLine, use_type_),
  2,
  6,
  0,
  1,
  ~0u,
  ~0u,
  ~0u,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, pitch_angle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraCalibrator, camera_height_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, obstacle_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, type_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, type_probs_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, upper_left_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, lower_right_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, key_points_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraObstacle, debug_message_),
  0,
  3,
  ~0u,
  1,
  2,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, header_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, source_topic_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, error_code_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, camera_calibrator_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, camera_laneline_),
  PROTOBUF_FIELD_OFFSET(::apollo::perception::camera::CameraDebug, camera_obstacle_),
  1,
  0,
  3,
  2,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::apollo::perception::camera::LaneLineCubicCurve)},
  { 17, 24, sizeof(::apollo::perception::camera::EndPoints)},
  { 26, 41, sizeof(::apollo::perception::camera::CameraLaneLine)},
  { 51, 58, sizeof(::apollo::perception::camera::CameraCalibrator)},
  { 60, 72, sizeof(::apollo::perception::camera::CameraObstacle)},
  { 79, 90, sizeof(::apollo::perception::camera::CameraDebug)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_LaneLineCubicCurve_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_EndPoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraLaneLine_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraCalibrator_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraObstacle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::apollo::perception::camera::_CameraDebug_default_instance_),
};

const char descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n0modules/perception/proto/perception_ca"
  "mera.proto\022\030apollo.perception.camera\032#mo"
  "dules/common/proto/geometry.proto\032!modul"
  "es/common/proto/header.proto\0322modules/pe"
  "rception/proto/perception_obstacle.proto"
  "\"n\n\022LaneLineCubicCurve\022\025\n\rlongitude_min\030"
  "\001 \001(\002\022\025\n\rlongitude_max\030\002 \001(\002\022\t\n\001a\030\003 \001(\002\022"
  "\t\n\001b\030\004 \001(\002\022\t\n\001c\030\005 \001(\002\022\t\n\001d\030\006 \001(\002\"W\n\tEndP"
  "oints\022%\n\005start\030\001 \001(\0132\026.apollo.common.Poi"
  "nt2D\022#\n\003end\030\002 \001(\0132\026.apollo.common.Point2"
  "D\"\257\004\n\016CameraLaneLine\0224\n\004type\030\001 \001(\0162&.apo"
  "llo.perception.camera.LaneLineType\022@\n\010po"
  "s_type\030\002 \001(\0162..apollo.perception.camera."
  "LaneLinePositionType\022H\n\022curve_camera_coo"
  "rd\030\003 \001(\0132,.apollo.perception.camera.Lane"
  "LineCubicCurve\022G\n\021curve_image_coord\030\004 \001("
  "\0132,.apollo.perception.camera.LaneLineCub"
  "icCurve\0226\n\026curve_camera_point_set\030\005 \003(\0132"
  "\026.apollo.common.Point3D\0225\n\025curve_image_p"
  "oint_set\030\006 \003(\0132\026.apollo.common.Point2D\022@"
  "\n\023image_end_point_set\030\007 \003(\0132#.apollo.per"
  "ception.camera.EndPoints\022\020\n\010track_id\030\010 \001"
  "(\005\022\022\n\nconfidence\030\t \001(\002\022;\n\010use_type\030\n \001(\016"
  "2).apollo.perception.camera.LaneLineUseT"
  "ype\">\n\020CameraCalibrator\022\023\n\013pitch_angle\030\001"
  " \001(\002\022\025\n\rcamera_height\030\002 \001(\002\"\255\003\n\016CameraOb"
  "stacle\0227\n\010obstacle\030\001 \001(\0132%.apollo.percep"
  "tion.PerceptionObstacle\022A\n\004type\030\025 \001(\01623."
  "apollo.perception.camera.CameraObstacle."
  "CameraType\022\022\n\ntype_probs\030\026 \003(\002\022*\n\nupper_"
  "left\030\027 \001(\0132\026.apollo.common.Point2D\022+\n\013lo"
  "wer_right\030\030 \001(\0132\026.apollo.common.Point2D\022"
  "*\n\nkey_points\030\031 \003(\0132\026.apollo.common.Poin"
  "t2D\022\025\n\rdebug_message\030\032 \003(\t\"o\n\nCameraType"
  "\022\013\n\007UNKNOWN\020\000\022\023\n\017UNKNOWN_MOVABLE\020\001\022\025\n\021UN"
  "KNOWN_UNMOVABLE\020\002\022\016\n\nPEDESTRIAN\020\003\022\013\n\007BIC"
  "YCLE\020\004\022\013\n\007VEHICLE\020\005\"\342\002\n\013CameraDebug\022%\n\006h"
  "eader\030\001 \001(\0132\025.apollo.common.Header\022\024\n\014so"
  "urce_topic\030\002 \001(\t\022I\n\nerror_code\030\003 \001(\0162).a"
  "pollo.perception.camera.CameraErrorCode:"
  "\nERROR_NONE\022E\n\021camera_calibrator\030\004 \001(\0132*"
  ".apollo.perception.camera.CameraCalibrat"
  "or\022A\n\017camera_laneline\030\005 \003(\0132(.apollo.per"
  "ception.camera.CameraLaneLine\022A\n\017camera_"
  "obstacle\030\006 \003(\0132(.apollo.perception.camer"
  "a.CameraObstacle*4\n\017CameraErrorCode\022\016\n\nE"
  "RROR_NONE\020\000\022\021\n\rERROR_UNKNOWN\020\001*V\n\014LaneLi"
  "neType\022\020\n\014WHITE_DASHED\020\000\022\017\n\013WHITE_SOLID\020"
  "\001\022\021\n\rYELLOW_DASHED\020\002\022\020\n\014YELLOW_SOLID\020\003*\210"
  "\002\n\024LaneLinePositionType\022\031\n\014BOLLARD_LEFT\020"
  "\373\377\377\377\377\377\377\377\377\001\022\030\n\013FOURTH_LEFT\020\374\377\377\377\377\377\377\377\377\001\022\027\n\n"
  "THIRD_LEFT\020\375\377\377\377\377\377\377\377\377\001\022\032\n\rADJACENT_LEFT\020\376"
  "\377\377\377\377\377\377\377\377\001\022\025\n\010EGO_LEFT\020\377\377\377\377\377\377\377\377\377\001\022\r\n\tEGO_"
  "RIGHT\020\001\022\022\n\016ADJACENT_RIGHT\020\002\022\017\n\013THIRD_RIG"
  "HT\020\003\022\020\n\014FOURTH_RIGHT\020\004\022\021\n\rBOLLARD_RIGHT\020"
  "\005\022\t\n\005OTHER\020\006\022\013\n\007UNKNOWN\020\007*(\n\017LaneLineUse"
  "Type\022\010\n\004REAL\020\000\022\013\n\007VIRTUAL\020\001"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_deps[3] = {
  &::descriptor_table_modules_2fcommon_2fproto_2fgeometry_2eproto,
  &::descriptor_table_modules_2fcommon_2fproto_2fheader_2eproto,
  &::descriptor_table_modules_2fperception_2fproto_2fperception_5fobstacle_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto = {
  false, false, 2267, descriptor_table_protodef_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, "modules/perception/proto/perception_camera.proto", 
  &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once, descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_deps, 3, 6,
  schemas, file_default_instances, TableStruct_modules_2fperception_2fproto_2fperception_5fcamera_2eproto::offsets,
  file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto, file_level_service_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter() {
  return &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_modules_2fperception_2fproto_2fperception_5fcamera_2eproto(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
namespace apollo {
namespace perception {
namespace camera {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraObstacle_CameraType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[0];
}
bool CameraObstacle_CameraType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN;
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN_MOVABLE;
constexpr CameraObstacle_CameraType CameraObstacle::UNKNOWN_UNMOVABLE;
constexpr CameraObstacle_CameraType CameraObstacle::PEDESTRIAN;
constexpr CameraObstacle_CameraType CameraObstacle::BICYCLE;
constexpr CameraObstacle_CameraType CameraObstacle::VEHICLE;
constexpr CameraObstacle_CameraType CameraObstacle::CameraType_MIN;
constexpr CameraObstacle_CameraType CameraObstacle::CameraType_MAX;
constexpr int CameraObstacle::CameraType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CameraErrorCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[1];
}
bool CameraErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[2];
}
bool LaneLineType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLinePositionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[3];
}
bool LaneLinePositionType_IsValid(int value) {
  switch (value) {
    case -5:
    case -4:
    case -3:
    case -2:
    case -1:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LaneLineUseType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto);
  return file_level_enum_descriptors_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[4];
}
bool LaneLineUseType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class LaneLineCubicCurve::_Internal {
 public:
  using HasBits = decltype(std::declval<LaneLineCubicCurve>()._has_bits_);
  static void set_has_longitude_min(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude_max(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_a(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_b(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_d(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

LaneLineCubicCurve::LaneLineCubicCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.LaneLineCubicCurve)
}
LaneLineCubicCurve::LaneLineCubicCurve(const LaneLineCubicCurve& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_min_, &from.longitude_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&longitude_min_)) + sizeof(d_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.LaneLineCubicCurve)
}

void LaneLineCubicCurve::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&longitude_min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&d_) -
    reinterpret_cast<char*>(&longitude_min_)) + sizeof(d_));
}

LaneLineCubicCurve::~LaneLineCubicCurve() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.LaneLineCubicCurve)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LaneLineCubicCurve::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void LaneLineCubicCurve::ArenaDtor(void* object) {
  LaneLineCubicCurve* _this = reinterpret_cast< LaneLineCubicCurve* >(object);
  (void)_this;
}
void LaneLineCubicCurve::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LaneLineCubicCurve::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void LaneLineCubicCurve::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.LaneLineCubicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&longitude_min_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&d_) -
        reinterpret_cast<char*>(&longitude_min_)) + sizeof(d_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LaneLineCubicCurve::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float longitude_min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_longitude_min(&has_bits);
          longitude_min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float longitude_max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_longitude_max(&has_bits);
          longitude_max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float a = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_a(&has_bits);
          a_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float b = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_b(&has_bits);
          b_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float c = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_c(&has_bits);
          c_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float d = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_d(&has_bits);
          d_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LaneLineCubicCurve::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.LaneLineCubicCurve)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float longitude_min = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude_min(), target);
  }

  // optional float longitude_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_longitude_max(), target);
  }

  // optional float a = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_a(), target);
  }

  // optional float b = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_b(), target);
  }

  // optional float c = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_c(), target);
  }

  // optional float d = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_d(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.LaneLineCubicCurve)
  return target;
}

size_t LaneLineCubicCurve::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.LaneLineCubicCurve)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional float longitude_min = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float longitude_max = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

    // optional float a = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional float b = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float c = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional float d = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LaneLineCubicCurve::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.LaneLineCubicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  const LaneLineCubicCurve* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LaneLineCubicCurve>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.LaneLineCubicCurve)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.LaneLineCubicCurve)
    MergeFrom(*source);
  }
}

void LaneLineCubicCurve::MergeFrom(const LaneLineCubicCurve& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.LaneLineCubicCurve)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      longitude_min_ = from.longitude_min_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_max_ = from.longitude_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000008u) {
      b_ = from.b_;
    }
    if (cached_has_bits & 0x00000010u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000020u) {
      d_ = from.d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneLineCubicCurve::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.LaneLineCubicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LaneLineCubicCurve::CopyFrom(const LaneLineCubicCurve& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.LaneLineCubicCurve)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneLineCubicCurve::IsInitialized() const {
  return true;
}

void LaneLineCubicCurve::InternalSwap(LaneLineCubicCurve* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LaneLineCubicCurve, d_)
      + sizeof(LaneLineCubicCurve::d_)
      - PROTOBUF_FIELD_OFFSET(LaneLineCubicCurve, longitude_min_)>(
          reinterpret_cast<char*>(&longitude_min_),
          reinterpret_cast<char*>(&other->longitude_min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LaneLineCubicCurve::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[0]);
}

// ===================================================================

class EndPoints::_Internal {
 public:
  using HasBits = decltype(std::declval<EndPoints>()._has_bits_);
  static const ::apollo::common::Point2D& start(const EndPoints* msg);
  static void set_has_start(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::common::Point2D& end(const EndPoints* msg);
  static void set_has_end(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::apollo::common::Point2D&
EndPoints::_Internal::start(const EndPoints* msg) {
  return *msg->start_;
}
const ::apollo::common::Point2D&
EndPoints::_Internal::end(const EndPoints* msg) {
  return *msg->end_;
}
void EndPoints::clear_start() {
  if (start_ != nullptr) start_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void EndPoints::clear_end() {
  if (end_ != nullptr) end_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
EndPoints::EndPoints(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.EndPoints)
}
EndPoints::EndPoints(const EndPoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::apollo::common::Point2D(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::apollo::common::Point2D(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.EndPoints)
}

void EndPoints::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

EndPoints::~EndPoints() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.EndPoints)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void EndPoints::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void EndPoints::ArenaDtor(void* object) {
  EndPoints* _this = reinterpret_cast< EndPoints* >(object);
  (void)_this;
}
void EndPoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EndPoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EndPoints::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.EndPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(start_ != nullptr);
      start_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(end_ != nullptr);
      end_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EndPoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Point2D start = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D end = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EndPoints::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.EndPoints)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Point2D start = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // optional .apollo.common.Point2D end = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.EndPoints)
  return target;
}

size_t EndPoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.EndPoints)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .apollo.common.Point2D start = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *start_);
    }

    // optional .apollo.common.Point2D end = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *end_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndPoints::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.EndPoints)
  GOOGLE_DCHECK_NE(&from, this);
  const EndPoints* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EndPoints>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.EndPoints)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.EndPoints)
    MergeFrom(*source);
  }
}

void EndPoints::MergeFrom(const EndPoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.EndPoints)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_start()->::apollo::common::Point2D::MergeFrom(from._internal_start());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_end()->::apollo::common::Point2D::MergeFrom(from._internal_end());
    }
  }
}

void EndPoints::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.EndPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndPoints::CopyFrom(const EndPoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.EndPoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndPoints::IsInitialized() const {
  return true;
}

void EndPoints::InternalSwap(EndPoints* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EndPoints, end_)
      + sizeof(EndPoints::end_)
      - PROTOBUF_FIELD_OFFSET(EndPoints, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EndPoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[1]);
}

// ===================================================================

class CameraLaneLine::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraLaneLine>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pos_type(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::apollo::perception::camera::LaneLineCubicCurve& curve_camera_coord(const CameraLaneLine* msg);
  static void set_has_curve_camera_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::apollo::perception::camera::LaneLineCubicCurve& curve_image_coord(const CameraLaneLine* msg);
  static void set_has_curve_image_coord(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_track_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_confidence(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_use_type(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

const ::apollo::perception::camera::LaneLineCubicCurve&
CameraLaneLine::_Internal::curve_camera_coord(const CameraLaneLine* msg) {
  return *msg->curve_camera_coord_;
}
const ::apollo::perception::camera::LaneLineCubicCurve&
CameraLaneLine::_Internal::curve_image_coord(const CameraLaneLine* msg) {
  return *msg->curve_image_coord_;
}
void CameraLaneLine::clear_curve_camera_point_set() {
  curve_camera_point_set_.Clear();
}
void CameraLaneLine::clear_curve_image_point_set() {
  curve_image_point_set_.Clear();
}
CameraLaneLine::CameraLaneLine(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  curve_camera_point_set_(arena),
  curve_image_point_set_(arena),
  image_end_point_set_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraLaneLine)
}
CameraLaneLine::CameraLaneLine(const CameraLaneLine& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      curve_camera_point_set_(from.curve_camera_point_set_),
      curve_image_point_set_(from.curve_image_point_set_),
      image_end_point_set_(from.image_end_point_set_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_curve_camera_coord()) {
    curve_camera_coord_ = new ::apollo::perception::camera::LaneLineCubicCurve(*from.curve_camera_coord_);
  } else {
    curve_camera_coord_ = nullptr;
  }
  if (from._internal_has_curve_image_coord()) {
    curve_image_coord_ = new ::apollo::perception::camera::LaneLineCubicCurve(*from.curve_image_coord_);
  } else {
    curve_image_coord_ = nullptr;
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&pos_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(pos_type_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraLaneLine)
}

void CameraLaneLine::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&curve_camera_coord_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&use_type_) -
    reinterpret_cast<char*>(&curve_camera_coord_)) + sizeof(use_type_));
pos_type_ = -5;
}

CameraLaneLine::~CameraLaneLine() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraLaneLine)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraLaneLine::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete curve_camera_coord_;
  if (this != internal_default_instance()) delete curve_image_coord_;
}

void CameraLaneLine::ArenaDtor(void* object) {
  CameraLaneLine* _this = reinterpret_cast< CameraLaneLine* >(object);
  (void)_this;
}
void CameraLaneLine::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraLaneLine::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraLaneLine::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraLaneLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  curve_camera_point_set_.Clear();
  curve_image_point_set_.Clear();
  image_end_point_set_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(curve_camera_coord_ != nullptr);
      curve_camera_coord_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(curve_image_coord_ != nullptr);
      curve_image_coord_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&use_type_) -
        reinterpret_cast<char*>(&type_)) + sizeof(use_type_));
    pos_type_ = -5;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraLaneLine::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.camera.LaneLineType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLineType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::camera::LaneLineType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLinePositionType_IsValid(val))) {
            _internal_set_pos_type(static_cast<::apollo::perception::camera::LaneLinePositionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_camera_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_curve_image_coord(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point3D curve_camera_point_set = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve_camera_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point2D curve_image_point_set = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_curve_image_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_image_end_point_set(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 track_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_track_id(&has_bits);
          track_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float confidence = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_confidence(&has_bits);
          confidence_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::LaneLineUseType_IsValid(val))) {
            _internal_set_use_type(static_cast<::apollo::perception::camera::LaneLineUseType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraLaneLine::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraLaneLine)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.camera.LaneLineType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_pos_type(), target);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::curve_camera_coord(this), target, stream);
  }

  // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::curve_image_coord(this), target, stream);
  }

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_curve_camera_point_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_curve_camera_point_set(i), target, stream);
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_curve_image_point_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_curve_image_point_set(i), target, stream);
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_image_end_point_set_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_image_end_point_set(i), target, stream);
  }

  // optional int32 track_id = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_track_id(), target);
  }

  // optional float confidence = 9;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_confidence(), target);
  }

  // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_use_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraLaneLine)
  return target;
}

size_t CameraLaneLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraLaneLine)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.common.Point3D curve_camera_point_set = 5;
  total_size += 1UL * this->_internal_curve_camera_point_set_size();
  for (const auto& msg : this->curve_camera_point_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.common.Point2D curve_image_point_set = 6;
  total_size += 1UL * this->_internal_curve_image_point_set_size();
  for (const auto& msg : this->curve_image_point_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.EndPoints image_end_point_set = 7;
  total_size += 1UL * this->_internal_image_end_point_set_size();
  for (const auto& msg : this->image_end_point_set_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .apollo.perception.camera.LaneLineCubicCurve curve_camera_coord = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_camera_coord_);
    }

    // optional .apollo.perception.camera.LaneLineCubicCurve curve_image_coord = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *curve_image_coord_);
    }

    // optional .apollo.perception.camera.LaneLineType type = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

    // optional int32 track_id = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_track_id());
    }

    // optional float confidence = 9;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional .apollo.perception.camera.LaneLineUseType use_type = 10;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_use_type());
    }

    // optional .apollo.perception.camera.LaneLinePositionType pos_type = 2;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_pos_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraLaneLine::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraLaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraLaneLine* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraLaneLine>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraLaneLine)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraLaneLine)
    MergeFrom(*source);
  }
}

void CameraLaneLine::MergeFrom(const CameraLaneLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraLaneLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  curve_camera_point_set_.MergeFrom(from.curve_camera_point_set_);
  curve_image_point_set_.MergeFrom(from.curve_image_point_set_);
  image_end_point_set_.MergeFrom(from.image_end_point_set_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_curve_camera_coord()->::apollo::perception::camera::LaneLineCubicCurve::MergeFrom(from._internal_curve_camera_coord());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_curve_image_coord()->::apollo::perception::camera::LaneLineCubicCurve::MergeFrom(from._internal_curve_image_coord());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      confidence_ = from.confidence_;
    }
    if (cached_has_bits & 0x00000020u) {
      use_type_ = from.use_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      pos_type_ = from.pos_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraLaneLine::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraLaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraLaneLine::CopyFrom(const CameraLaneLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraLaneLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraLaneLine::IsInitialized() const {
  return true;
}

void CameraLaneLine::InternalSwap(CameraLaneLine* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  curve_camera_point_set_.InternalSwap(&other->curve_camera_point_set_);
  curve_image_point_set_.InternalSwap(&other->curve_image_point_set_);
  image_end_point_set_.InternalSwap(&other->image_end_point_set_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraLaneLine, use_type_)
      + sizeof(CameraLaneLine::use_type_)
      - PROTOBUF_FIELD_OFFSET(CameraLaneLine, curve_camera_coord_)>(
          reinterpret_cast<char*>(&curve_camera_coord_),
          reinterpret_cast<char*>(&other->curve_camera_coord_));
  swap(pos_type_, other->pos_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraLaneLine::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[2]);
}

// ===================================================================

class CameraCalibrator::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraCalibrator>()._has_bits_);
  static void set_has_pitch_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_camera_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

CameraCalibrator::CameraCalibrator(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraCalibrator)
}
CameraCalibrator::CameraCalibrator(const CameraCalibrator& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pitch_angle_, &from.pitch_angle_,
    static_cast<size_t>(reinterpret_cast<char*>(&camera_height_) -
    reinterpret_cast<char*>(&pitch_angle_)) + sizeof(camera_height_));
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraCalibrator)
}

void CameraCalibrator::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pitch_angle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&camera_height_) -
    reinterpret_cast<char*>(&pitch_angle_)) + sizeof(camera_height_));
}

CameraCalibrator::~CameraCalibrator() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraCalibrator)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraCalibrator::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CameraCalibrator::ArenaDtor(void* object) {
  CameraCalibrator* _this = reinterpret_cast< CameraCalibrator* >(object);
  (void)_this;
}
void CameraCalibrator::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraCalibrator::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraCalibrator::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraCalibrator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&pitch_angle_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&camera_height_) -
        reinterpret_cast<char*>(&pitch_angle_)) + sizeof(camera_height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraCalibrator::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional float pitch_angle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          _Internal::set_has_pitch_angle(&has_bits);
          pitch_angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float camera_height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          _Internal::set_has_camera_height(&has_bits);
          camera_height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraCalibrator::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraCalibrator)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float pitch_angle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch_angle(), target);
  }

  // optional float camera_height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_camera_height(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraCalibrator)
  return target;
}

size_t CameraCalibrator::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraCalibrator)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float pitch_angle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float camera_height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraCalibrator::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraCalibrator)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraCalibrator* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraCalibrator>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraCalibrator)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraCalibrator)
    MergeFrom(*source);
  }
}

void CameraCalibrator::MergeFrom(const CameraCalibrator& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraCalibrator)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pitch_angle_ = from.pitch_angle_;
    }
    if (cached_has_bits & 0x00000002u) {
      camera_height_ = from.camera_height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraCalibrator::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraCalibrator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraCalibrator::CopyFrom(const CameraCalibrator& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraCalibrator)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraCalibrator::IsInitialized() const {
  return true;
}

void CameraCalibrator::InternalSwap(CameraCalibrator* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraCalibrator, camera_height_)
      + sizeof(CameraCalibrator::camera_height_)
      - PROTOBUF_FIELD_OFFSET(CameraCalibrator, pitch_angle_)>(
          reinterpret_cast<char*>(&pitch_angle_),
          reinterpret_cast<char*>(&other->pitch_angle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraCalibrator::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[3]);
}

// ===================================================================

class CameraObstacle::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraObstacle>()._has_bits_);
  static const ::apollo::perception::PerceptionObstacle& obstacle(const CameraObstacle* msg);
  static void set_has_obstacle(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::common::Point2D& upper_left(const CameraObstacle* msg);
  static void set_has_upper_left(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::apollo::common::Point2D& lower_right(const CameraObstacle* msg);
  static void set_has_lower_right(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::perception::PerceptionObstacle&
CameraObstacle::_Internal::obstacle(const CameraObstacle* msg) {
  return *msg->obstacle_;
}
const ::apollo::common::Point2D&
CameraObstacle::_Internal::upper_left(const CameraObstacle* msg) {
  return *msg->upper_left_;
}
const ::apollo::common::Point2D&
CameraObstacle::_Internal::lower_right(const CameraObstacle* msg) {
  return *msg->lower_right_;
}
void CameraObstacle::clear_obstacle() {
  if (obstacle_ != nullptr) obstacle_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void CameraObstacle::clear_upper_left() {
  if (upper_left_ != nullptr) upper_left_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
void CameraObstacle::clear_lower_right() {
  if (lower_right_ != nullptr) lower_right_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
void CameraObstacle::clear_key_points() {
  key_points_.Clear();
}
CameraObstacle::CameraObstacle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  type_probs_(arena),
  key_points_(arena),
  debug_message_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraObstacle)
}
CameraObstacle::CameraObstacle(const CameraObstacle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      type_probs_(from.type_probs_),
      key_points_(from.key_points_),
      debug_message_(from.debug_message_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_obstacle()) {
    obstacle_ = new ::apollo::perception::PerceptionObstacle(*from.obstacle_);
  } else {
    obstacle_ = nullptr;
  }
  if (from._internal_has_upper_left()) {
    upper_left_ = new ::apollo::common::Point2D(*from.upper_left_);
  } else {
    upper_left_ = nullptr;
  }
  if (from._internal_has_lower_right()) {
    lower_right_ = new ::apollo::common::Point2D(*from.lower_right_);
  } else {
    lower_right_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraObstacle)
}

void CameraObstacle::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&obstacle_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&obstacle_)) + sizeof(type_));
}

CameraObstacle::~CameraObstacle() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraObstacle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraObstacle::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete obstacle_;
  if (this != internal_default_instance()) delete upper_left_;
  if (this != internal_default_instance()) delete lower_right_;
}

void CameraObstacle::ArenaDtor(void* object) {
  CameraObstacle* _this = reinterpret_cast< CameraObstacle* >(object);
  (void)_this;
}
void CameraObstacle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraObstacle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_probs_.Clear();
  key_points_.Clear();
  debug_message_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(obstacle_ != nullptr);
      obstacle_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(upper_left_ != nullptr);
      upper_left_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(lower_right_ != nullptr);
      lower_right_->Clear();
    }
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraObstacle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.perception.PerceptionObstacle obstacle = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_obstacle(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::CameraObstacle_CameraType_IsValid(val))) {
            _internal_set_type(static_cast<::apollo::perception::camera::CameraObstacle_CameraType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(21, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // repeated float type_probs = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          ptr -= 2;
          do {
            ptr += 2;
            _internal_add_type_probs(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
            ptr += sizeof(float);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<181>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_type_probs(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D upper_left = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_upper_left(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.common.Point2D lower_right = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_lower_right(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.common.Point2D key_points = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_key_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string debug_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            auto str = _internal_add_debug_message();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.CameraObstacle.debug_message");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraObstacle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraObstacle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.perception.PerceptionObstacle obstacle = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::obstacle(this), target, stream);
  }

  // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      21, this->_internal_type(), target);
  }

  // repeated float type_probs = 22;
  for (int i = 0, n = this->_internal_type_probs_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_type_probs(i), target);
  }

  // optional .apollo.common.Point2D upper_left = 23;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::upper_left(this), target, stream);
  }

  // optional .apollo.common.Point2D lower_right = 24;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::lower_right(this), target, stream);
  }

  // repeated .apollo.common.Point2D key_points = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_key_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_key_points(i), target, stream);
  }

  // repeated string debug_message = 26;
  for (int i = 0, n = this->_internal_debug_message_size(); i < n; i++) {
    const auto& s = this->_internal_debug_message(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraObstacle.debug_message");
    target = stream->WriteString(26, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraObstacle)
  return target;
}

size_t CameraObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraObstacle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float type_probs = 22;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_type_probs_size());
    size_t data_size = 4UL * count;
    total_size += 2 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_type_probs_size());
    total_size += data_size;
  }

  // repeated .apollo.common.Point2D key_points = 25;
  total_size += 2UL * this->_internal_key_points_size();
  for (const auto& msg : this->key_points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated string debug_message = 26;
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(debug_message_.size());
  for (int i = 0, n = debug_message_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      debug_message_.Get(i));
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .apollo.perception.PerceptionObstacle obstacle = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *obstacle_);
    }

    // optional .apollo.common.Point2D upper_left = 23;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upper_left_);
    }

    // optional .apollo.common.Point2D lower_right = 24;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *lower_right_);
    }

    // optional .apollo.perception.camera.CameraObstacle.CameraType type = 21;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraObstacle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraObstacle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraObstacle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraObstacle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraObstacle)
    MergeFrom(*source);
  }
}

void CameraObstacle::MergeFrom(const CameraObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  type_probs_.MergeFrom(from.type_probs_);
  key_points_.MergeFrom(from.key_points_);
  debug_message_.MergeFrom(from.debug_message_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_obstacle()->::apollo::perception::PerceptionObstacle::MergeFrom(from._internal_obstacle());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_upper_left()->::apollo::common::Point2D::MergeFrom(from._internal_upper_left());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_lower_right()->::apollo::common::Point2D::MergeFrom(from._internal_lower_right());
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraObstacle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraObstacle::CopyFrom(const CameraObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraObstacle::IsInitialized() const {
  return true;
}

void CameraObstacle::InternalSwap(CameraObstacle* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  type_probs_.InternalSwap(&other->type_probs_);
  key_points_.InternalSwap(&other->key_points_);
  debug_message_.InternalSwap(&other->debug_message_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraObstacle, type_)
      + sizeof(CameraObstacle::type_)
      - PROTOBUF_FIELD_OFFSET(CameraObstacle, obstacle_)>(
          reinterpret_cast<char*>(&obstacle_),
          reinterpret_cast<char*>(&other->obstacle_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraObstacle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[4]);
}

// ===================================================================

class CameraDebug::_Internal {
 public:
  using HasBits = decltype(std::declval<CameraDebug>()._has_bits_);
  static const ::apollo::common::Header& header(const CameraDebug* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_source_topic(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_code(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::apollo::perception::camera::CameraCalibrator& camera_calibrator(const CameraDebug* msg);
  static void set_has_camera_calibrator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::apollo::common::Header&
CameraDebug::_Internal::header(const CameraDebug* msg) {
  return *msg->header_;
}
const ::apollo::perception::camera::CameraCalibrator&
CameraDebug::_Internal::camera_calibrator(const CameraDebug* msg) {
  return *msg->camera_calibrator_;
}
void CameraDebug::clear_header() {
  if (header_ != nullptr) header_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
CameraDebug::CameraDebug(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  camera_laneline_(arena),
  camera_obstacle_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:apollo.perception.camera.CameraDebug)
}
CameraDebug::CameraDebug(const CameraDebug& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      camera_laneline_(from.camera_laneline_),
      camera_obstacle_(from.camera_obstacle_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_source_topic()) {
    source_topic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source_topic(), 
      GetArena());
  }
  if (from._internal_has_header()) {
    header_ = new ::apollo::common::Header(*from.header_);
  } else {
    header_ = nullptr;
  }
  if (from._internal_has_camera_calibrator()) {
    camera_calibrator_ = new ::apollo::perception::camera::CameraCalibrator(*from.camera_calibrator_);
  } else {
    camera_calibrator_ = nullptr;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:apollo.perception.camera.CameraDebug)
}

void CameraDebug::SharedCtor() {
source_topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&header_)) + sizeof(error_code_));
}

CameraDebug::~CameraDebug() {
  // @@protoc_insertion_point(destructor:apollo.perception.camera.CameraDebug)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CameraDebug::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
  if (this != internal_default_instance()) delete camera_calibrator_;
}

void CameraDebug::ArenaDtor(void* object) {
  CameraDebug* _this = reinterpret_cast< CameraDebug* >(object);
  (void)_this;
}
void CameraDebug::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CameraDebug::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CameraDebug::Clear() {
// @@protoc_insertion_point(message_clear_start:apollo.perception.camera.CameraDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  camera_laneline_.Clear();
  camera_obstacle_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      source_topic_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(header_ != nullptr);
      header_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(camera_calibrator_ != nullptr);
      camera_calibrator_->Clear();
    }
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CameraDebug::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .apollo.common.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string source_topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "apollo.perception.camera.CameraDebug.source_topic");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::apollo::perception::camera::CameraErrorCode_IsValid(val))) {
            _internal_set_error_code(static_cast<::apollo::perception::camera::CameraErrorCode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_camera_calibrator(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_laneline(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_camera_obstacle(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CameraDebug::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:apollo.perception.camera.CameraDebug)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .apollo.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // optional string source_topic = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_source_topic().data(), static_cast<int>(this->_internal_source_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "apollo.perception.camera.CameraDebug.source_topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source_topic(), target);
  }

  // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_error_code(), target);
  }

  // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::camera_calibrator(this), target, stream);
  }

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_laneline_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_camera_laneline(i), target, stream);
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_camera_obstacle_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_camera_obstacle(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:apollo.perception.camera.CameraDebug)
  return target;
}

size_t CameraDebug::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:apollo.perception.camera.CameraDebug)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .apollo.perception.camera.CameraLaneLine camera_laneline = 5;
  total_size += 1UL * this->_internal_camera_laneline_size();
  for (const auto& msg : this->camera_laneline_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .apollo.perception.camera.CameraObstacle camera_obstacle = 6;
  total_size += 1UL * this->_internal_camera_obstacle_size();
  for (const auto& msg : this->camera_obstacle_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string source_topic = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_source_topic());
    }

    // optional .apollo.common.Header header = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *header_);
    }

    // optional .apollo.perception.camera.CameraCalibrator camera_calibrator = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *camera_calibrator_);
    }

    // optional .apollo.perception.camera.CameraErrorCode error_code = 3 [default = ERROR_NONE];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_error_code());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CameraDebug::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:apollo.perception.camera.CameraDebug)
  GOOGLE_DCHECK_NE(&from, this);
  const CameraDebug* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CameraDebug>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:apollo.perception.camera.CameraDebug)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:apollo.perception.camera.CameraDebug)
    MergeFrom(*source);
  }
}

void CameraDebug::MergeFrom(const CameraDebug& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:apollo.perception.camera.CameraDebug)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  camera_laneline_.MergeFrom(from.camera_laneline_);
  camera_obstacle_.MergeFrom(from.camera_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_source_topic(from._internal_source_topic());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_header()->::apollo::common::Header::MergeFrom(from._internal_header());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_camera_calibrator()->::apollo::perception::camera::CameraCalibrator::MergeFrom(from._internal_camera_calibrator());
    }
    if (cached_has_bits & 0x00000008u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CameraDebug::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:apollo.perception.camera.CameraDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CameraDebug::CopyFrom(const CameraDebug& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:apollo.perception.camera.CameraDebug)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CameraDebug::IsInitialized() const {
  return true;
}

void CameraDebug::InternalSwap(CameraDebug* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  camera_laneline_.InternalSwap(&other->camera_laneline_);
  camera_obstacle_.InternalSwap(&other->camera_obstacle_);
  source_topic_.Swap(&other->source_topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CameraDebug, error_code_)
      + sizeof(CameraDebug::error_code_)
      - PROTOBUF_FIELD_OFFSET(CameraDebug, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CameraDebug::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_getter, &descriptor_table_modules_2fperception_2fproto_2fperception_5fcamera_2eproto_once,
      file_level_metadata_modules_2fperception_2fproto_2fperception_5fcamera_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace camera
}  // namespace perception
}  // namespace apollo
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::LaneLineCubicCurve* Arena::CreateMaybeMessage< ::apollo::perception::camera::LaneLineCubicCurve >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::LaneLineCubicCurve >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::EndPoints* Arena::CreateMaybeMessage< ::apollo::perception::camera::EndPoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::EndPoints >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraLaneLine* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraLaneLine >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraLaneLine >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraCalibrator* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraCalibrator >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraCalibrator >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraObstacle* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraObstacle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraObstacle >(arena);
}
template<> PROTOBUF_NOINLINE ::apollo::perception::camera::CameraDebug* Arena::CreateMaybeMessage< ::apollo::perception::camera::CameraDebug >(Arena* arena) {
  return Arena::CreateMessageInternal< ::apollo::perception::camera::CameraDebug >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
